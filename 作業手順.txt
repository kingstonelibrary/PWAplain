
設置先
    http://localhost/pwa-test/index.html                +++注意：必ずindex.htmlをつけてリロードする
                                                                                                    ^^^^^^^^^^^^^^^^^^
   ・反映・
    ポイント：index.htmlの変更後、最初のアクセス時のの反映について、リロードのURLにindex.htmlをいれてたら
                      SWのイベントによるリロード前にすでに変更が反映されてて、リロードは意味ないように思える
                      結局、反映にははリロードでなくindex.htmlの指定がポイントだったわけ！？         
                      
    ホーム追加
    ポイント        １．sw.jsのトップのスコープにfetchハンドラ記述がないと、スマホでアクセス時に追加バナーがでない点を注意
    　　　            ２．マニフェストに"192x192"のアイコンの記述がないと、スマホでアクセス時に追加バナーがでない点を注意 
 
        （参考：Chromeスマホ版はこれをやらないと「ホームに追加」バナーが出ないが、FireFoxはなくてもアドレスバー横の、家の中に＋アイコンが出る）
        　　　　マタこの条件を満たしていれば、バナーは出るので、新規に作ったサイトで、すぐにバナーが出なくても
        　　　　時間を置いたり何度もプルリフレッシュをしたりしていれば設置先のようにでるようにある
 
        
概要
    ボラープレートのoffline-pluginがServiceWorkerの機能を提供しており、
    ボイラープレートのPWAの機能についてはoffline-pluginのオプションや設定をしていく(参照元：https://github.com/NekR/offline-plugin)
    
    このoffline-pluginの機能としてsw.jsの出力に加えて、そのoffline-pluginランタイムオブジェクトを利用することでSWに発生したイベントを
    UIスレッド側に通知する機能があり、それによってSWで発生したイベントがUIスレッド側に告知されるので
    それを利用して./src/scripts/script.js のようにイベントハンドラを「UIスレッド側」で取得・処理する
    
    これによってoffline-pluginが出力するsw.jsをカスタムすることなく
    SW更新イベントの後、ページのリロードまでUIスレッド側でできるようなサンプルが
    上記offline-pluginのGitHUBサイトに公開されてて、そのまま使ってる
    ・・・後述のようなSWのカスタムしてた苦労はなくなりビルドしてマニフェストへのパス変えるだけでよくなった
    （index.html内のマニフェストファイルへのパスは書き換え必要なので注意）

    
    新規にビルドしたときの後処理
    ーーーーーーーーーーーーーー
    ・ ./icons-*/ 以下にできたmanifest.jsonを.／dist／以下に持ってくる
    ・sw.js内のアイコンなどへのパスを ./icons-*/ から ./icons/ に変更
    ・./dist/index.htmlのマニフェストへのパスに ./icons/ を付与（*はその都度出力されるハッシュ）
    ・index.htmlの変更反映の問題はリロードするときのURLにindex.htmlを加えることで解決しているので
    　sw.jsの変更はなくなったということではなく、SWのinstall待ちのスキップは記述する
    　（これを記述しておけば、あとはoffline-pluginのデフォルトのままで新SWがページ制御まで行く）
    
              self.addEventListener('install', function (event) {
                console.log('[SW]:', 'Install event');
                event.waitUntil(caches.delete(CACHE_NAME));             // ← この部分追加
                var installing = undefined;
            
                if (strategy === 'changed') {
                  installing = cacheChanged('main');
                } else {
                  installing = cacheAssets('main');
                }
            
                event.waitUntil(installing);
                event.waitUntil(self.skipWaiting());                                    // ← この部分追加
              });   
              
    ・sw.jsルートにfetchイベントハンドラ記述   ＋  プッシュ通知のイベントハンドラ記述
        // var __wpo = { } の直後の位置に以下を追加する
            self.addEventListener("fetch", function(event) {});
            self.addEventListener("push", function(event) {
              //送られたプッシュ通知の本文を表示
              if (Notification.permission == "granted") {
                console.log("Push Notification Recieved", event);
                event.waitUntil(
                  self.registration
                    .showNotification(event.data.json().notification.title, {
                      body: event.data.json().notification.body,
                      icon: event.data.json().notification.icon
                    })
                    .then(
                      function(showEvent) {},
                      function(error) {
                        console.log(error);
                      }
                    )
                );
              }
            });
            
    
    UI側でSWイベント取得機能利用手順：https://github.com/NekR/offline-plugin/blob/master/docs/updates.md
     ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー  ーーーーーーーーーーーーーーー  
        １．webpack.prod.js でプラグインをオプション付きでnewする
                    new OfflinePlugin({
                      ServiceWorker: {
                        events: true
                      }
                    })
                    
        ２．./src/scripts/script.js にイベントハンドラを設置する
        
                // offline-plugin runtimeによるSWイベントの受信
                const runtime = require('offline-plugin/runtime');                                      ← （注意）ここ以外で 'offline-plugin/runtime' をimportしたりrequireしないこと
                
                runtime.install({
                  onUpdating: () => {
                    console.log('SW Event detected in main.js:', 'onUpdating');
                  },
                  onUpdateReady: () => {
                    console.log('SW Event detected in main.js:', 'onUpdateReady');
                    // Tells to new SW to take control immediately
                    runtime.applyUpdate();
                  },
                  onUpdated: () => {
                    console.log('SW Event detected in main.js:', 'onUpdated');
                    // 新SWのアップデートイベントでページをリロードさせる
                    window.location.reload();         
                  },
                
                  onUpdateFailed: () => {
                    console.log('SW Event detected in main.js:', 'onUpdateFailed');
                  }
                });
    
                （注意：ブラウザのログはすぐに上書きされて確認しにくいがちゃんとUIスレッド側でSWのイベントが拾えていることは確認できている）
    


    ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー        
    以下は、この機能を利用する前のSWがをカスタムしていたときの内容
    ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー        
        
        作業手順
         １．HTMLやJSをの変更は ./src/ 以下のファイルで行う
         ２．buildする
         ３．./dist/index.html 内のmanifest.jsonへのパスを修正する(マニフェストファイルはicons-***以下なので)
         　　デフォでは ”/manifest.json”となっているので、その前に実際の ”icon-***”の部分を追加する
         ４．sw.jsのバージョンはビルド時刻似合っているので特に変更の必要はない
         ５．sw.jsのカスタム部分を「 ./distORG_swFile/swORG.js」から必要部分をコピペする
         　　コピペする部分はキャッシュファイル情報保有オブジェクトの直後からの部分のみ
         　　（オブジェクト内のキャッシュ一覧を上書きしてしまわないように注意）
         
         備忘録
                             
                             [キャッシュとページ反映のための設定(注意)]　（ミニマルサンプルのキャッシュ戦略）
                            
                            いろいろ試行錯誤したがindex.htmlの変更をすぐに反映させるパターンとしてこのプロジェクトのように
                            最終形を以下に確定した 　　　　　　　　　　　　　　　( http://localhost/pwa-test/index.html )
                            
                            main.jsカスタム
                            　 SWファイルの更新検出イベントで、SWへmewssage送信
                            　　navigator.serviceWorker.controller.postMessage('updateDESU!', [channel.port1]);
                            ボイラープレートオプション(sw.js)
                             　"strategy": "changed",
                             　"responseStrategy": "cache-first",
                            SWカスタム(sw.js)
                             　installイベント：　　　event.waitUntil(caches.delete(CACHE_NAME));　現行キャッシュ消す
                            　　　　　　　　　　  　self.skipWaiting()　　直ぐに登録
                             　activateイベント：　　self.clients.claim()　  すぐにページ制御（デフォ）
                            　　　　　　　　　　  　activation.then(storeCacheData)　デフォ
                            　　　　　　　　　　  　activation.then(deleteObsolete)　  デフォ
                            　 messageイベント：　  self.addEventListener('message' ... caches.delete(CACHE_NAME);
                            　　　　　　　　　　　　　　　　　↑ ブラウザからSW更新message受け、現行キャッシュ消す
        
        
           ./dist/ 以下の”icons-***”フォルダのハッシュを削除するとsw.jsやmainifest.jsonからの
           参照ができなくなるので、そこはそのままにして、./dist/index.html 内のmanifest.jsonへのパスを
           実際にボイラープレートで出力される ”icons-***/manifest.json” と修正することで対応する
        
           sw.jsは毎回、新規に出力されるので、カスタム部分が上書きされてしまう。
           なのでオリジナルの./distORG_swFile/swORG.jsから必要部分をコピペする。
           必要部分は、__wpo オブジェクトのしたから全部
        
           sw.jsのカスタム部分
            ・installイベントハンドラに event.waitUntil(self.skipWaiting()); を追加
            ・activateイベントハンドラ内に以下を追加（リロード用のPostMessage）
              event.waitUntil(
                self.clients.matchAll().then((clients) => {
                  console.log('post message from SW.');        
                  clients.forEach(client => client.postMessage({'message' : 'activated'}))
                })
              )
              DOM側にメッセージを送信してそのイベントハンドラでリロードさせるもので
              ブラウザのログは早くてわからないが確実にmessageの送受信は行われリロードしている